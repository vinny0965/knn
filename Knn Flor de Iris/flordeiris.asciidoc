= Carregando Bibliotecas


+*In[10]:*+
[source, ipython3]
----
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

%matplotlib inLine
----

= Carregando os dados do arquivo csv em um dataFrame


+*In[11]:*+
[source, ipython3]
----
df = pd.read_csv('iris.csv')
----

= Coluna dos dados


+*In[12]:*+
[source, ipython3]
----
df.columns
----


+*Out[12]:*+
----Index(['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)',
       'petal width (cm)', 'target'],
      dtype='object')----

= vendo os dados


+*In[13]:*+
[source, ipython3]
----
df
----


+*Out[13]:*+
----
[cols=",,,,,",options="header",]
|=======================================================================
| |sepal length (cm) |sepal width (cm) |petal length (cm) |petal width
(cm) |target
|0 |5.1 |3.5 |1.4 |0.2 |SETOSA

|1 |4.9 |3.0 |1.4 |0.2 |SETOSA

|2 |4.7 |3.2 |1.3 |0.2 |SETOSA

|3 |4.6 |3.1 |1.5 |0.2 |SETOSA

|4 |5.0 |3.6 |1.4 |0.2 |SETOSA

|... |... |... |... |... |...

|145 |6.7 |3.0 |5.2 |2.3 |VIRGINICA

|146 |6.3 |2.5 |5.0 |1.9 |VIRGINICA

|147 |6.5 |3.0 |5.2 |2.0 |VIRGINICA

|148 |6.2 |3.4 |5.4 |2.3 |VIRGINICA

|149 |5.9 |3.0 |5.1 |1.8 |VIRGINICA
|=======================================================================

150 rows × 5 columns
----

= Descrevendo os Dados


+*In[14]:*+
[source, ipython3]
----
df.describe()
----


+*Out[14]:*+
----
[cols=",,,,",options="header",]
|=======================================================================
| |sepal length (cm) |sepal width (cm) |petal length (cm) |petal width
(cm)
|count |150.000000 |150.000000 |150.000000 |150.000000

|mean |5.843333 |3.054000 |3.758667 |1.198667

|std |0.828066 |0.433594 |1.764420 |0.763161

|min |4.300000 |2.000000 |1.000000 |0.100000

|25% |5.100000 |2.800000 |1.600000 |0.300000

|50% |5.800000 |3.000000 |4.350000 |1.300000

|75% |6.400000 |3.300000 |5.100000 |1.800000

|max |7.900000 |4.400000 |6.900000 |2.500000
|=======================================================================
----

=== Dispersão dos dados


+*In[15]:*+
[source, ipython3]
----
sb.pairplot(df, hue='target')
----


+*Out[15]:*+
----<seaborn.axisgrid.PairGrid at 0x7fa3d21ee450>
![png](output_11_1.png)
----

=== Selecionando as ``features'' para classificação em um array NUMPY


+*In[16]:*+
[source, ipython3]
----
x = np.array(df.drop('target',1))
x
----


+*Out[16]:*+
----array([[5.1, 3.5, 1.4, 0.2],
       [4.9, 3. , 1.4, 0.2],
       [4.7, 3.2, 1.3, 0.2],
       [4.6, 3.1, 1.5, 0.2],
       [5. , 3.6, 1.4, 0.2],
       [5.4, 3.9, 1.7, 0.4],
       [4.6, 3.4, 1.4, 0.3],
       [5. , 3.4, 1.5, 0.2],
       [4.4, 2.9, 1.4, 0.2],
       [4.9, 3.1, 1.5, 0.1],
       [5.4, 3.7, 1.5, 0.2],
       [4.8, 3.4, 1.6, 0.2],
       [4.8, 3. , 1.4, 0.1],
       [4.3, 3. , 1.1, 0.1],
       [5.8, 4. , 1.2, 0.2],
       [5.7, 4.4, 1.5, 0.4],
       [5.4, 3.9, 1.3, 0.4],
       [5.1, 3.5, 1.4, 0.3],
       [5.7, 3.8, 1.7, 0.3],
       [5.1, 3.8, 1.5, 0.3],
       [5.4, 3.4, 1.7, 0.2],
       [5.1, 3.7, 1.5, 0.4],
       [4.6, 3.6, 1. , 0.2],
       [5.1, 3.3, 1.7, 0.5],
       [4.8, 3.4, 1.9, 0.2],
       [5. , 3. , 1.6, 0.2],
       [5. , 3.4, 1.6, 0.4],
       [5.2, 3.5, 1.5, 0.2],
       [5.2, 3.4, 1.4, 0.2],
       [4.7, 3.2, 1.6, 0.2],
       [4.8, 3.1, 1.6, 0.2],
       [5.4, 3.4, 1.5, 0.4],
       [5.2, 4.1, 1.5, 0.1],
       [5.5, 4.2, 1.4, 0.2],
       [4.9, 3.1, 1.5, 0.1],
       [5. , 3.2, 1.2, 0.2],
       [5.5, 3.5, 1.3, 0.2],
       [4.9, 3.1, 1.5, 0.1],
       [4.4, 3. , 1.3, 0.2],
       [5.1, 3.4, 1.5, 0.2],
       [5. , 3.5, 1.3, 0.3],
       [4.5, 2.3, 1.3, 0.3],
       [4.4, 3.2, 1.3, 0.2],
       [5. , 3.5, 1.6, 0.6],
       [5.1, 3.8, 1.9, 0.4],
       [4.8, 3. , 1.4, 0.3],
       [5.1, 3.8, 1.6, 0.2],
       [4.6, 3.2, 1.4, 0.2],
       [5.3, 3.7, 1.5, 0.2],
       [5. , 3.3, 1.4, 0.2],
       [7. , 3.2, 4.7, 1.4],
       [6.4, 3.2, 4.5, 1.5],
       [6.9, 3.1, 4.9, 1.5],
       [5.5, 2.3, 4. , 1.3],
       [6.5, 2.8, 4.6, 1.5],
       [5.7, 2.8, 4.5, 1.3],
       [6.3, 3.3, 4.7, 1.6],
       [4.9, 2.4, 3.3, 1. ],
       [6.6, 2.9, 4.6, 1.3],
       [5.2, 2.7, 3.9, 1.4],
       [5. , 2. , 3.5, 1. ],
       [5.9, 3. , 4.2, 1.5],
       [6. , 2.2, 4. , 1. ],
       [6.1, 2.9, 4.7, 1.4],
       [5.6, 2.9, 3.6, 1.3],
       [6.7, 3.1, 4.4, 1.4],
       [5.6, 3. , 4.5, 1.5],
       [5.8, 2.7, 4.1, 1. ],
       [6.2, 2.2, 4.5, 1.5],
       [5.6, 2.5, 3.9, 1.1],
       [5.9, 3.2, 4.8, 1.8],
       [6.1, 2.8, 4. , 1.3],
       [6.3, 2.5, 4.9, 1.5],
       [6.1, 2.8, 4.7, 1.2],
       [6.4, 2.9, 4.3, 1.3],
       [6.6, 3. , 4.4, 1.4],
       [6.8, 2.8, 4.8, 1.4],
       [6.7, 3. , 5. , 1.7],
       [6. , 2.9, 4.5, 1.5],
       [5.7, 2.6, 3.5, 1. ],
       [5.5, 2.4, 3.8, 1.1],
       [5.5, 2.4, 3.7, 1. ],
       [5.8, 2.7, 3.9, 1.2],
       [6. , 2.7, 5.1, 1.6],
       [5.4, 3. , 4.5, 1.5],
       [6. , 3.4, 4.5, 1.6],
       [6.7, 3.1, 4.7, 1.5],
       [6.3, 2.3, 4.4, 1.3],
       [5.6, 3. , 4.1, 1.3],
       [5.5, 2.5, 4. , 1.3],
       [5.5, 2.6, 4.4, 1.2],
       [6.1, 3. , 4.6, 1.4],
       [5.8, 2.6, 4. , 1.2],
       [5. , 2.3, 3.3, 1. ],
       [5.6, 2.7, 4.2, 1.3],
       [5.7, 3. , 4.2, 1.2],
       [5.7, 2.9, 4.2, 1.3],
       [6.2, 2.9, 4.3, 1.3],
       [5.1, 2.5, 3. , 1.1],
       [5.7, 2.8, 4.1, 1.3],
       [6.3, 3.3, 6. , 2.5],
       [5.8, 2.7, 5.1, 1.9],
       [7.1, 3. , 5.9, 2.1],
       [6.3, 2.9, 5.6, 1.8],
       [6.5, 3. , 5.8, 2.2],
       [7.6, 3. , 6.6, 2.1],
       [4.9, 2.5, 4.5, 1.7],
       [7.3, 2.9, 6.3, 1.8],
       [6.7, 2.5, 5.8, 1.8],
       [7.2, 3.6, 6.1, 2.5],
       [6.5, 3.2, 5.1, 2. ],
       [6.4, 2.7, 5.3, 1.9],
       [6.8, 3. , 5.5, 2.1],
       [5.7, 2.5, 5. , 2. ],
       [5.8, 2.8, 5.1, 2.4],
       [6.4, 3.2, 5.3, 2.3],
       [6.5, 3. , 5.5, 1.8],
       [7.7, 3.8, 6.7, 2.2],
       [7.7, 2.6, 6.9, 2.3],
       [6. , 2.2, 5. , 1.5],
       [6.9, 3.2, 5.7, 2.3],
       [5.6, 2.8, 4.9, 2. ],
       [7.7, 2.8, 6.7, 2. ],
       [6.3, 2.7, 4.9, 1.8],
       [6.7, 3.3, 5.7, 2.1],
       [7.2, 3.2, 6. , 1.8],
       [6.2, 2.8, 4.8, 1.8],
       [6.1, 3. , 4.9, 1.8],
       [6.4, 2.8, 5.6, 2.1],
       [7.2, 3. , 5.8, 1.6],
       [7.4, 2.8, 6.1, 1.9],
       [7.9, 3.8, 6.4, 2. ],
       [6.4, 2.8, 5.6, 2.2],
       [6.3, 2.8, 5.1, 1.5],
       [6.1, 2.6, 5.6, 1.4],
       [7.7, 3. , 6.1, 2.3],
       [6.3, 3.4, 5.6, 2.4],
       [6.4, 3.1, 5.5, 1.8],
       [6. , 3. , 4.8, 1.8],
       [6.9, 3.1, 5.4, 2.1],
       [6.7, 3.1, 5.6, 2.4],
       [6.9, 3.1, 5.1, 2.3],
       [5.8, 2.7, 5.1, 1.9],
       [6.8, 3.2, 5.9, 2.3],
       [6.7, 3.3, 5.7, 2.5],
       [6.7, 3. , 5.2, 2.3],
       [6.3, 2.5, 5. , 1.9],
       [6.5, 3. , 5.2, 2. ],
       [6.2, 3.4, 5.4, 2.3],
       [5.9, 3. , 5.1, 1.8]])----

=== Selecionando as classes para uma classificação em um array NUMPY


+*In[17]:*+
[source, ipython3]
----
y = np.array(df.target)
y
----


+*Out[17]:*+
----array(['SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA',
       'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA',
       'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA',
       'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA',
       'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA',
       'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA',
       'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA',
       'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA', 'SETOSA',
       'SETOSA', 'SETOSA', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR',
       'VERSICOLOR', 'VERSICOLOR', 'VERSICOLOR', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA', 'VIRGINICA',
       'VIRGINICA', 'VIRGINICA', 'VIRGINICA'], dtype=object)----

= Importando o KNN


+*In[18]:*+
[source, ipython3]
----
from sklearn.neighbors import KNeighborsClassifier
----

= Criando um Classificador


+*In[19]:*+
[source, ipython3]
----
knn = KNeighborsClassifier(n_neighbors=3)
----

= Treinando o classificador


+*In[20]:*+
[source, ipython3]
----
knn.fit(x,y)
----


+*Out[20]:*+
----KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=None, n_neighbors=3, p=2,
                     weights='uniform')----

= Predizendo um tipo de flor iris

== Passar o vetor com as caracteristicas da flor


+*In[117]:*+
[source, ipython3]
----
knn.predict([[3.0,3.1,3.0,2.0]])
----


+*Out[117]:*+
----array(['VERSICOLOR'], dtype=object)----

= Acuracia


+*In[118]:*+
[source, ipython3]
----
print(knn.score(x,y))
----


+*Out[118]:*+
----
0.96
----


+*In[ ]:*+
[source, ipython3]
----

----
